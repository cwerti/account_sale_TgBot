import more_itertools as mit

import logging

import nest_asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types.message import ContentType
from aiogram.dispatcher import filters

from src.data.OperationsDataBase import add_user, get_subs, buy_subscription_check, \
    start_db, get_operations, buy_subscription_registration, add_subscription
import config

nest_asyncio.apply()

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands="start", state="*")
async def smd_start(message: types.Message):
    add_user(message.from_id)
    text = f"""–ü—Ä–∏–≤–µ—Ç, _{message.chat.first_name}_üëã
–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ _kion, okko, s—Åarlet_ –∏ –¥—Ä.

–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu"""
    await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="Markdown")


@dp.message_handler(commands="menu", state="*")
async def start_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="Meta", callback_data="meta0"))
    buttons = [
        [types.InlineKeyboardButton(text="üí´—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫üí´",
                                    callback_data="subscription_list"),
         types.InlineKeyboardButton(text="üí∏–ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Çüí∏",
                                    callback_data="sale_account")],
        [
            types.InlineKeyboardButton(text="üì±—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç scarletüì±",
                                       callback_data="scarlett")
        ],
        [
            types.InlineKeyboardButton(text="üõí–º–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí",
                                       callback_data="my_buy"),
            types.InlineKeyboardButton(text="üí¨–ø–æ–¥–¥–µ—Ä–∂–∫–∞üí¨",
                                       callback_data="help")
        ],
    ]
    if message['from']['id'] in config.admins_id:
        buttons.append([types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î",
                                                   callback_data="add_bd")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_photo(chat_id=message.chat.id, photo=types.InputFile(f"src/images/logo.jpg"))
    return await bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å‚ùì',
                                  reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('menu'))
async def start_menu(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="Meta", callback_data="meta0"))
    buttons = [
        [types.InlineKeyboardButton(text="üí´—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫üí´",
                                    callback_data="subscription_list"),
         types.InlineKeyboardButton(text="üí∏–ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Çüí∏",
                                    callback_data="sale_account")],
        [
            types.InlineKeyboardButton(text="üì±–ø–æ–¥–ø–∏—Å–∫–∞ scarlettüì±",
                                       callback_data="scarlet")
        ],
        [
            types.InlineKeyboardButton(text="üõí–º–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí",
                                       callback_data="my_buy"),
            types.InlineKeyboardButton(text="üí¨–ø–æ–¥–¥–µ—Ä–∂–∫–∞üí¨",
                                       callback_data="help")
        ],
    ]
    if call.message['from']['id'] in config.admins_id:
        buttons.append([types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î",
                                                   callback_data="add_bd")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/logo.jpg"))
    return await bot.send_message(chat_id=call.message.chat.id, text='–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å‚ùì',
                                  reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('my_buy'))
async def my_buy(call: types.CallbackQuery):
    text = get_operations(call['from']['id'])
    await bot.send_message(chat_id=call.message.chat.id, text=text, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('add_bd'))
async def information_add(call: types.CallbackQuery):
    text = """–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞:
    –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ bd{Enter}
    login password –∏–º—è-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å-–ø–æ–¥–ø–∏—Å–∫–∏ —Ü–µ–Ω–∞-–∑–∞-–¥–µ–Ω—å –¥–∞—Ç–∞-—Å–æ–∑–¥–∞–Ω–∏—è(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è){Enter}
    –ù–∞–ø—Ä–∏–º–µ—Ä: *
    –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ bd
    log1 pass1 name1 30 123.45 2023-07-13 00:00:00
    log2 pass2 name2 95 678.90*
    """
    await bot.send_message(chat_id=call.message.chat.id, text=text, parse_mode='Markdown')


@dp.message_handler(filters.Text(contains="–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ bd", ignore_case=True))
async def text_example(message: types.Message):
    """–æ–Ω–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
       —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ
    """
    if message['from']['id'] in config.admins_id:
        text = add_subscription(message.text.split('\n')[1:])
        await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="Markdown")
    else:
        await bot.send_message(chat_id=message.chat.id, text='—Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')


@dp.callback_query_handler(lambda call: call.data.startswith('sale_account'))
async def sale_account(call: types.CallbackQuery):
    text = """–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @HraVsu

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('scarlet'))
async def scarlett(call: types.CallbackQuery):
    text = """–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @HraVsu
–æ–±—ã—á–Ω—ã–π-600‚ÇΩ
–¥–≤–æ–π–Ω–æ–π-900‚ÇΩ
–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π-1400‚ÇΩ
—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ ipad(–æ–±—ã—á–Ω—ã–π)-300‚ÇΩ

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/scarlet.png"))
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('help'))
async def help_msg(call: types.CallbackQuery):
    text = """–í–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ @HraVsu
–í–æ–ø—Ä–æ—Å—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ @Qqqeeeq

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('subscription_list'))
async def subscription_list(call: types.CallbackQuery):
    buttons = [
        [types.InlineKeyboardButton(text="Wink",
                                    callback_data=f"service|Wink"),
         types.InlineKeyboardButton(text="Okko",
                                    callback_data=f"service|Okko"),
         types.InlineKeyboardButton(text="ivi",
                                    callback_data=f"service|ivi")
         ],
        [types.InlineKeyboardButton(text="Kion",
                                    callback_data=f"service|Kion"),
         types.InlineKeyboardButton(text="–ö–∏–Ω–æ–ü–æ–∏—Å–∫",
                                    callback_data=f"service|–ö–∏–Ω–æ–ü–æ–∏—Å–∫"),
         types.InlineKeyboardButton(text="Premier",
                                    callback_data=f"service|Premier")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                                    callback_data=f"menu")
         ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–µ—Ä–≤–∏—Å‚úÖ',
                           reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('service'))
async def subscription_list(call: types.CallbackQuery):
    """
    –≤—ã–≤–æ–¥–∏—Ç —Å–µ—Ä–≤–∏—Å—ã
    """
    name_service = call.data.split('|')[1]
    buttons = [
        [types.InlineKeyboardButton(text="–º–µ–Ω—å—à–µ 30",
                                    callback_data=f"buy|0|{name_service}"),
         types.InlineKeyboardButton(text="–æ—Ç 30 –¥–æ 90",
                                    callback_data=f"buy|1|{name_service}"),
         types.InlineKeyboardButton(text="–±–æ–ª—å—à–µ 90",
                                    callback_data=f"buy|2|{name_service}")
         ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/{name_service}.png"))
    await bot.send_message(chat_id=call.message.chat.id, text='–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                           reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('buy'))
async def all_sub(call: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    days: –µ—Å–ª–∏ 0, —Ç–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 30, –µ—Å–ª–∏ 1 —Ç–æ –æ—Ç 30 –¥–æ 90, –µ—Å–ª–∏ 2 —Ç–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 90
    name_service: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    """
    tmp = call.data.split('|')
    name_service = tmp[2]
    but = get_subs(int(tmp[1]), name_service, call['from']['id'])

    buttons = [
        *mit.batched(but, 3),
        [types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="subscription_list")
         ]
    ]
    text = '–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏'
    if len(but) == 0:
        text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å _{name_service}_ —Ä–∞—Å–∫—É–ø–ª–µ–Ω—ã."
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(chat_id=call.message.chat.id, text=text,
                           reply_markup=keyboard, parse_mode='Markdown')


@dp.callback_query_handler(lambda call: call.data.startswith('payment'))
async def buy_sub(call: types.CallbackQuery):
    tmp = call.data.split('|')
    day = tmp[1]
    price = int(float(tmp[2]) * 100)
    name_service = tmp[3]
    sub_id = int(tmp[4])
    PAYMENTS_PROVIDER_TOKEN = config.pay_token
    PRICE = types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {day} –¥–Ω.", amount=price)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
    await bot.send_invoice(call.message.chat.id,
                           title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {name_service}",
                           description=f"""–ê–∫–∫–∞—É–Ω—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π {name_service} –Ω–∞ {day} –¥–Ω.""",
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload=f"{sub_id}|{call['from']['id']}|{price}")


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    flag = buy_subscription_check(pre_checkout_query.invoice_payload)
    return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=flag, error_message=
    '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫—Ç–æ-—Ç–æ —É–∂–µ —É—Å–ø–µ–ª –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é')


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    inf = message.successful_payment
    name, login, password = buy_subscription_registration(inf.invoice_payload)
    await bot.send_message(message.chat.id,
                           f"_–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!_ –í—ã –ø—Ä–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ _{name}_ –∑–∞ "
                           f"_{inf.total_amount // 100},{inf.total_amount % 100}_ {inf.currency}!\n"
                           f"*–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ =>\n–õ–æ–≥–∏–Ω:* {login}\n*–ü–∞—Ä–æ–ª—å:* {password}\n_–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!_\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é /menu",
                           parse_mode='Markdown')


@dp.message_handler(content_types=ContentType.DOCUMENT)
async def qwe(message: types.Message):
    if message['from']['id'] in config.admins_id:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "data.txt")
    else:
        await bot.send_message(message.chat.id,
                               f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    start_db()
    executor.start_polling(dp, skip_updates=True)
