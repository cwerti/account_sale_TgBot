import datetime

from src.data import db_session
from src.data.users import User
from src.data.subscription import Subscription
from src.data.history import History
import more_itertools as mit
from sqlalchemy import and_, all_

import logging

import nest_asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types.message import ContentType

import config

nest_asyncio.apply()

bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands="start", state="*")
async def smd_start(message: types.Message):
    text = f"""–ü—Ä–∏–≤–µ—Ç, _{message.chat.first_name}_üëã
–° –ø–æ–º–æ—à—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ _kion, okko, skarlett_ –∏ –¥. —Ä.

–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu"""
    await bot.send_message(chat_id=message.chat.id, text=text, parse_mode="Markdown")


@dp.message_handler(commands="menu", state="*")
async def start_menu(message: types.Message):
    session = db_session.create_session()
    res = session.query(User).filter(User.tg_id == message.from_id).first()
    if not res:
        user = User(tg_id=message.from_id)
        session.add(user)
        session.commit()
    session.close()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="Meta", callback_data="meta0"))
    if message['from']['id'] != 1076674186:
        buttons = [
            [types.InlineKeyboardButton(text="üí´—Å–ø–∏–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫üí´",
                                        callback_data="subscription_list"),
             types.InlineKeyboardButton(text="üí∏–ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Çüí∏",
                                        callback_data="sale_account")],
            [
                types.InlineKeyboardButton(text="üì±–ø–æ–¥–ø–∏—Å–∫–∞ scarlettüì±",
                                           callback_data="scarlett")
            ],
            [
                types.InlineKeyboardButton(text="üõí–º–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí",
                                           callback_data="my_buy"),
                types.InlineKeyboardButton(text="üí¨–ø–æ–¥–¥–µ—Ä–∂–∫–∞üí¨",
                                           callback_data="help")
            ]
        ]
    else:
        buttons = [
            [types.InlineKeyboardButton(text="üí´—Å–ø–∏–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫üí´",
                                        callback_data="subscription_list"),
             types.InlineKeyboardButton(text="üí∏–ø—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Çüí∏",
                                        callback_data="sale_account")],
            [
                types.InlineKeyboardButton(text="üì±–ø–æ–¥–ø–∏—Å–∫–∞ scarlettüì±",
                                           callback_data="scarlett")
            ],
            [
                types.InlineKeyboardButton(text="üõí–º–æ–∏ –ø–æ–∫—É–ø–∫–∏üõí",
                                           callback_data="my_buy"),
                types.InlineKeyboardButton(text="üí¨–ø–æ–¥–¥–µ—Ä–∂–∫–∞üí¨",
                                           callback_data="help")
            ],
            [types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î",
                                        callback_data="add_bd")
             ]
        ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return await bot.send_message(chat_id=message.chat.id, text='–≤—ã–±–µ—Ä–∏—Ç–µ –≥–µ—Ä–æ—è –æ –∫–æ—Ç—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±—Ä–Ω–µ–µ',
                                  reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('add_bd'))
async def sale_account(call: types.CallbackQuery):
    text = """–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ txt —Å –ø–æ–ª—è–∏:
    –∏–º—è –¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å) –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∫–∏ —Ü–µ–Ω–∞_–∑–∞_–¥–µ–Ω—å 
    """
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('sale_account'))
async def sale_account(call: types.CallbackQuery):
    text = """–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @HraVsu

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('scarlett'))
async def scarlett(call: types.CallbackQuery):
    text = """–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @HraVsu
–æ–±—ã—á–Ω—ã–π-600‚ÇΩ
–¥–≤–æ–π–Ω–æ–π-900‚ÇΩ
–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π-1400‚ÇΩ
—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ ipad(–æ–±—ã—á–Ω—ã–π)-300‚ÇΩ

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/scarlett.png"))
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('help'))
async def help_msg(call: types.CallbackQuery):
    text = """–í–æ–ø—Ä–æ—Å—ã –æ –ø–æ–∫—É–ø–∫–µ @HraVsu
–í–æ–ø—Ä–æ—Å—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏ @Qqqeeeq

–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /menu"""
    await bot.send_message(chat_id=call.message.chat.id, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith('subscription_list'))
async def subscription_list(call: types.CallbackQuery):
    """
    –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    """
    for i in config.service_lst:
        buttons = [
            [types.InlineKeyboardButton(text="–º–µ–Ω—å—à–µ 30",
                                        callback_data=f"buy|1|{i}"),
             types.InlineKeyboardButton(text="–æ—Ç 30 –¥–æ 90",
                                        callback_data=f"buy|2|{i}"),
             types.InlineKeyboardButton(text="–±–æ–ª—å—à–µ 90",
                                        callback_data=f"buy|3|{i}")
             ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/{i}.png"))
        await bot.send_message(chat_id=call.message.chat.id, text='–≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏',
                               reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('buy'))
async def all_sub(call: types.CallbackQuery):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    days: –µ—Å–ª–∏ 1, —Ç–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 30, –µ—Å–ª–∏ 2 —Ç–æ –æ—Ç 30 –¥–æ 90, –µ—Å–ª–∏ 3 —Ç–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 90
    name_servise: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    """
    tmp = call.data.split('|')
    vir = lambda x: x.duration - (datetime.datetime.now() - x.created_date).days
    flag = [lambda x: vir(x) < 31, lambda x: 30 < vir(x) < 91, lambda x: vir(x) > 90][int(tmp[1]) - 1]
    name_servise = '–∫–∏–Ω–æ–ø–æ–∏—Å–∫'  # tmp[2] –ø–æ–∫–∞ –æ—Å—Ç–∞–≤—å —Ç–∞–∫, –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —É —Ç–µ–±—è –ø–æ–∫–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ kino

    sess = db_session.create_session()
    sub = sess.query(Subscription).filter(Subscription.name == name_servise).all()  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏
    sub = list(filter(flag, sub))  # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏(—è –∑–∞–∫–æ–ª–µ–±–∞–ª—Å—è –≤ –ø–æ—Ç–æ–∫–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–¥–µ–ª–∞—Ç—å)
    sess.close()
    but = []
    name_servise = 'kino'  # –¥–ª—è —Ç–µ—Å—Ç–∞
    for i in sub:
        ostat = (datetime.datetime.now().date() - i.created_date.date()).days
        but.append(types.InlineKeyboardButton(text=f"{ostat} –¥–Ω–µ–π {int(ostat * i.price)}—Ä",
                                                  callback_data=f"payment|{ostat}|{int(ostat * i.price)}|{name_servise}"))
    buttons = [
        [types.InlineKeyboardButton(text=f"{12} –¥–Ω–µ–π {120}—Ä",
                                                  callback_data=f"payment|{12}|{120}|{name_servise}"),
         but[0]],
        [types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="subscription_list")
         ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_photo(chat_id=call.message.chat.id, photo=types.InputFile(f"src/images/{name_servise}.png"))  #
    await bot.send_message(chat_id=call.message.chat.id, text='–≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏',
                           reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith('payment'))
async def all_sub(call: types.CallbackQuery):
    tmp = call.data.split('|')
    day = tmp[1]
    price = tmp[2]
    name_servise = tmp[3]
    PAYMENTS_PROVIDER_TOKEN = '381764678:TEST:61580'
    PRICE = types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {day} –º–µ—Å—è—Ü", amount=int(price) * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)
    await bot.send_invoice(call.message.chat.id,
                           title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {name_servise}",
                           description=f"""–ê–∫–∫–∞—É–Ω—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π {name_servise} –Ω–∞ {day} –¥–Ω–µ–π""",
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency="rub",
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")


@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    print("SUCCESSFUL PAYMENT:")
    inf = message.successful_payment
    payment_info = inf.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {inf.total_amount // 100} {inf.currency} –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!!!")


@dp.message_handler(content_types=ContentType.DOCUMENT)
async def qwe(message: types.Message):
    if message['from']['id'] != 1076674186:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "data.txt")
    else:
        await bot.send_message(message.chat.id,
                               f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç \n\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω–± –Ω–∞–∂–º–∏—Ç–µ /menu")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    db_session.global_init('src/db/TestDB.sqlite')
    session = db_session.create_session()
    # for i in [['–æ–∫–∫–æ', 13.33, 30, datetime.date(2023, 7, 1)], ['–ø—Ä–µ–º—å–µ—Ä', 6.66, 32, datetime.date(2023, 7, 13)],
    #          ['–∫–∏–Ω–æ–ø–æ–∏—Å–∫', 12.66, 65, datetime.date(2023, 7, 13)], ['–∏–≤–∏', 13.33, 92, datetime.date(2023, 6, 13)]]:
    #     n, p, d, c = i
    #     session.add(Subscription(name=n, price=p, duration=d, created_date=c))
    # session.commit()
    session.close()
    executor.start_polling(dp, skip_updates=True)
